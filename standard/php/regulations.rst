PHP 开发约定
--------------

基本约定
^^^^^^^^^^

#. 外部输入必须验证过滤之后才能使用，禁止使用未经过滤验证的数据进入正式业务逻辑和数据库。
#. 为了提高多人协作代码开发，代码/文件格式，命名等必须遵循 PSR 规范 :doc:`code_style/index`。
#. 调用方法时必须关注它的参数类型要求，返回值的说明，执行必要的判断。
#. 代码必须添加注释，标准参看 `PSR-5 <https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md>`__ ，目前并未定稿。
#. 标识符命名不能使用无意义的单词和有错误拼写的单词（最好利用IDE或编辑器的拼写检查），多个单词根据情况使用 _ 驼峰分割，不允许非正常的多个单词合并到一起。
#. 命名一定要经过仔细斟酌，让人容易看懂 :doc:`naming`。
#. 需要有注释的元素包括：文件，类，类属性，类常量，类方法，函数 :doc:`参看示例 <phpdoc-example>`，:doc:`简单介绍 <phpdoc-introduction>`。
#. 逻辑判断等需要理解的逻辑尽量添加行注释，但是不要每行或非常浅显易懂的都加，只需要在对应逻辑块添加即可，逻辑注释大概在30%左右。
#. 文件结构按以下顺序组织：[文件注释] [命名空间] [use导入语句] [定义内容]。
#. 类内容结构尽量按以下顺序组织：[traits导入语句] [类常量] [类静态属性] [类属性] [构造函数] [析构函数] [魔术方法] [其他方法]。
#. 修改他人代码，需建立在完全了解代码逻辑或知会过本人的基础上修改 [#f1]_ 。
#. 数据量多且没有缓存的时候应该杜绝循环查询数据库。
#. 杜绝代码中循环发送HTTP请求。
#. 禁止使用 $_REQUEST 式获取参数。必须明确参数是 POST还是GET等等。
#. 尽量杜绝太多的执行路径，即条件判断，多优化 [#f6]_
#. 状态，开关位等必须定义一个常量（一般在某个模型，类库里，不能定义全局），不允许拿一个数字去作判断，见下面示例:

.. code-block:: php

    <?php
    // 如果订单状态为2（已完成），错误的写法
    if ($order->status == 2)// 别人看了也不知道 2是什么，而且无法在一个地方看出来已经存在哪些状态，修改起来也是相当的困难

    // 正确的写法
    if ($order->status == $order::STATUS_COMPLETE)
    if ($order->status == ModelOrder::STATUS_COMPLETE)


    // 开关位，状态常量定义
    namespace Model;

    /**
     * 定义为常量之后，要修改值也简单了，别人看代码也能看懂了，而且一看就能知晓目前有哪些状态定义。
     */
    class Order
    {
        /** 订单状态 - 新订单 */
        const STATUS_NEW = 1;
        /** 订单状态 - 已完成 */
        const STATUS_COMPLETE = 2;

        <...>
    }


版本控制使用
^^^^^^^^^^^^^

#. 项目必须添加非代码文件（日志，缓存）的SVN过滤并将过滤属性提交到版本库，提交时注意不提交这些类型的文件。
#. 如果只是对某个文件调试作了更改，调试完毕请使用 还原(revert)，不能提交到版本库。
#. 提交代码前，需要仔细浏览自己所要提交的内容。执行上一条所说内容的检查，还原未作实际更改的文件。检查是否有调试代码未被清除。
#. 提交到版本库的代码，不能有僵尸代码（死代码） [#f2]_ ，如果需要某一天还原那部分代码，请利用版本控制工具恢复。

MVC框架内开发
^^^^^^^^^^^^^^

基本
"""""""

#. 文件加载必须使用自动加载机制。
#. MVC框架代码中的任何地方一律不能出现以下代码关键字: exit,error_reporting,ini_set,global。
#. 业务逻辑代码文件中不能出现以下代码关键字：require, require_once, include, include_once, define, 全局const。
#. 业务逻辑代码文件中不能出现任何全局变量，常量的定义。
#. 写日志，输入输出必须使用统一的方式方法，出现不可兼容的问题时，报告出来统一修正。
#. 除第3方库自带外不可编写任何全局函数。
#. 不能在业务逻辑内拦截所有异常 [#f3]_ 。只能根据需要只拦截需要的异常或者拦截后作了处理继续抛出:

.. code-block:: php

    <?php
    try {
        // doSomething
    } catch (\SomeException $e) {
        // doSomeThing
        throw $e;
    }

Phalcon框架
"""""""""""""

#. 需要初始化，或者需要涉及配置进行初始化的，一律尽量统一注入到 注入容器(DI)。
#. 不允许直接将污染变量 [#f4]_ 填入到SQL语句当中，必须使用参数绑定，非特殊情况，不得直接使用数据库连接执行原生SQL。
#. 不允许使用 Phalcon\\Http\\Request->get() 函数获取参数（既使用 $_REQUEST）。

其他建议项
^^^^^^^^^^^^

#. 建议使用IDE [#f5]_ 代替编辑器，提高生产效率，提早发现和减少BUG。
#. 建议学习PSR格式规范，输入时就按照规范来走，防止格式化出现意外情况。
#. 建议完善IDE不能侦测的变量类型注释（/** @var \splFileInfo $splFile xx目录下的文件对象 \*/），提高编码效率，减少错误的发生。

.. [#f1] 通过SVN的追溯功能（annotate）来查看是谁最后编辑过此块代码
.. [#f2] 僵尸代码是指那些被注释掉的或者无用的代码块，其实已经没有用了，保留在那里严重影响和谐，英语里称为 Dead Code。
.. [#f3] 框架结构最外层会进行拦截并按照请求设计好的格式输出错误信息
.. [#f4] 外部输入的变量，非自己定义值的变量
.. [#f5] 建议使用 `phpstorm <https://www.jetbrains.com/phpstorm/>`__ , :doc:`../../other/phpstorm`
.. [#f6] 比如3个if，那执行路径就是3的2次方=9条。调试，测试极难，而且容易出现死角
